#!/usr/bin/env python3
import argparse
import sys
import textwrap

import bibtexparser
from bibtexparser.bparser import BibTexParser

WRAP_WIDTH = 82

def print_authors(au: str):
    authors = au.split("and")
    lastnames = []
    # Get lastname
    for ai in authors:
        if "," in ai:
             lastnames.append(ai.strip().split(",")[0])
        else:
             lastnames.append(ai.strip().split(" ")[-1])

    lastnames = [f"author:{ai}" for ai in lastnames]
    query = " OR ".join(lastnames)
    print(f"{query}")


def print_all(year, author, title, sub):
    au = "Author(s):"
    ti = "Title:"
    su = "Subtitle:"
    ye = "Year:"
    if sub is None:
        print(
            f" <tt><b>{au:<11}</b></tt> {author}|"
            + f" <tt><b>{ti:<11}</b></tt>  {title}|"
            + f" <tt><b>{ye:<11}</b></tt> {year}|"
        )
    else:
        print(
            f" <tt><b>{au:<11}</b></tt> {author}|"
            + f" <tt><b>{ti:<11}</b></tt>  {title}|"
            + f" <tt><b>{su:<11}</b></tt>  {sub}|"
            + f" <tt><b>{ye:<11}</b></tt> {year}|"
        )


if __name__ == "__main__":
    #  bib = sys.stdin.read()

    pars = argparse.ArgumentParser(description="Parse a bibfile")
    pars.add_argument(
        "bibfile",
        type=str,
        nargs="?",
        help="Bibfile to be parsed",
        default=sys.stdin.read(),
    )
    pars.add_argument(
        "--author",
        help="Return author corresponding to bibkey",
        action="store_const",
        const=True,
        default=False,
    )
    pars.add_argument(
        "--all",
        help="Return relevant fields",
        action="store_const",
        const=True,
        default=False,
    )

    argumetns = pars.parse_args()
    bib = argumetns.bibfile

    parser = BibTexParser()
    parser.ignore_nonstandard_types = True

    bib_pars = bibtexparser.loads(bib, parser)
    bib_db = bib_pars.entries[0]

    # Get the relevant information
    bib_type = bib_db["ENTRYTYPE"]
    if bib_type in ["misc", "standard"]:
        author = bib_db["organization"]
    else:
        if "author" in bib_db:
            author = bib_db["author"]
        else:
            author = bib_db["editor"]

    title = bib_db["title"]
    year = bib_db["year"]

    # Wrap title
    title_wrap = textwrap.wrap(title, width=WRAP_WIDTH)
    title = "\n<tt>              </tt>".join(title_wrap)

    # Check whether there is a subtitle
    if "subtitle" in bib_db:
        sub = bib_db["subtitle"]
    else:
        sub = None

    if argumetns.all:
        print_all(year, author, title, sub)
    elif argumetns.author:
        print_authors(author)

